{"version":3,"sources":["logo.svg","Table.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TableHeader","TableBody","props","rows","tabledata","map","row","index","key","name","job","onClick","removeCharacter","Table","this","data","Component","Form","initialState","state","handleChange","event","target","value","setState","onFormSubmit","preventDefault","handleSubmit","onSubmit","htmlFor","type","id","onChange","Header","App","characters","filter","character","i","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+KAAAA,EAAOC,QAAU,IAA0B,kC,qJCErCC,G,cAAc,WAChB,OACI,+BACA,4BACI,oCACA,mCACA,0CAONC,EAAY,SAACC,GACf,IAAMC,EAAOD,EAAME,UAAUC,KAAI,SAACC,EAAKC,GACrC,OACE,wBAAIC,IAAKD,GACP,4BAAKD,EAAIG,MACT,4BAAKH,EAAII,KACT,4BAAI,4BAAQC,QAAS,kBAAMT,EAAMU,gBAAgBL,KAA7C,eAIV,OAAO,+BAAQJ,IAkBJU,E,uKAZF,IAAD,EAC4BC,KAAKZ,MAA9Ba,EADH,EACGA,KAAMH,EADT,EACSA,gBACb,OACI,+BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWR,UAAWW,EAAMH,gBAAiBA,S,GANzCI,a,kBC2BLC,E,4MAtDXC,aAAe,CACXT,KAAM,GACNC,IAAK,I,EAETS,MAAQ,EAAKD,a,EAGbE,aAAe,SAAAC,GAAU,IAAD,EACEA,EAAMC,OAAtBb,EADc,EACdA,KAAMc,EADQ,EACRA,MAEd,EAAKC,SAAL,eACKf,EAAQc,K,EAIjBE,aAAe,SAACJ,GACZA,EAAMK,iBAEN,EAAKxB,MAAMyB,aAAa,EAAKR,OAC7B,EAAKK,SAAS,EAAKN,e,uDAIX,IAAD,EACiBJ,KAAKK,MAAnBV,EADH,EACGA,KAAMC,EADT,EACSA,IAEd,OACA,0BAAMkB,SAAUd,KAAKW,cACnB,4CACE,2BAAOI,QAAQ,QAAf,QACA,2BACEC,KAAK,OACLrB,KAAK,OACLsB,GAAG,OACHR,MAAOd,EACPuB,SAAUlB,KAAKM,eACjB,2BAAOS,QAAQ,OAAf,OACA,2BACEC,KAAK,OACLrB,KAAK,MACLsB,GAAG,MACHR,MAAOb,EACPsB,SAAUlB,KAAKM,eACjB,4BAAQU,KAAK,UAAb,e,GA5COd,aCObiB,EAAS,WACX,OACI,gCACE,kDACA,0DA0CKC,E,4MApCbf,MAAQ,CACNgB,WAAY,CAAC,CACX1B,KAAM,UACNC,IAAK,a,EAKTE,gBAAkB,SAACL,GAAW,IACrB4B,EAAc,EAAKhB,MAAnBgB,WAEP,EAAKX,SAAS,CACZW,WAAYA,EAAWC,QAAO,SAACC,EAAWC,GACxC,OAAOA,IAAM/B,Q,EAKnBoB,aAAe,SAAAU,GACb,EAAKb,SAAS,CAACW,WAAW,GAAD,mBAAM,EAAKhB,MAAMgB,YAAjB,CAA6BE,O,uDAI9C,IACAF,EAAerB,KAAKK,MAApBgB,WAER,OACE,yBAAKI,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAOxB,KAAMoB,EAAYvB,gBAAmBE,KAAKF,kBACjD,kBAAC,EAAD,CAAMe,aAAcb,KAAKa,oB,GA/BfX,aCNEwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.322293c2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React,{Component} from 'react';\r\n\r\nconst TableHeader = () => {\r\n    return(\r\n        <thead>\r\n        <tr>\r\n            <th>Name</th>\r\n            <th>Job</th>\r\n            <th>Action</th>\r\n        </tr>\r\n        </thead>\r\n    )\r\n}\r\n\r\n\r\nconst TableBody = (props) => {\r\n    const rows = props.tabledata.map((row, index) => {\r\n      return (\r\n        <tr key={index}>\r\n          <td>{row.name}</td>\r\n          <td>{row.job}</td>\r\n          <td><button onClick={() => props.removeCharacter(index)}>Delete</button></td>\r\n        </tr>\r\n      )\r\n    })\r\n    return <tbody>{rows}</tbody>\r\n  }\r\n\r\n\r\n\r\nclass Table extends Component{\r\n    render(){\r\n        const {data, removeCharacter} = this.props\r\n        return(\r\n            <table>\r\n                <TableHeader />\r\n                <TableBody tabledata={data} removeCharacter={removeCharacter}/>\r\n            </table>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Table;","import React, {Component} from 'react'\r\n\r\nclass Form extends Component{\r\n    initialState = {\r\n        name: '',\r\n        job: '',\r\n    }\r\n    state = this.initialState;\r\n    \r\n\r\n    handleChange = event => {\r\n      const { name, value } = event.target;\r\n\r\n      this.setState({\r\n          [name] : value\r\n      });\r\n  }\r\n\r\n  onFormSubmit = (event) => {\r\n      event.preventDefault();\r\n      \r\n      this.props.handleSubmit(this.state);\r\n      this.setState(this.initialState);\r\n  }\r\n\r\n\r\n    render() {\r\n        const { name, job } = this.state;\r\n      \r\n        return (      \r\n        <form onSubmit={this.onFormSubmit}>\r\n          <h1>Add new data</h1>\r\n            <label htmlFor=\"name\">Name</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"name\"\r\n              id=\"name\"\r\n              value={name}\r\n              onChange={this.handleChange} />\r\n            <label htmlFor=\"job\">Job</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"job\"\r\n              id=\"job\"\r\n              value={job}\r\n              onChange={this.handleChange} />\r\n            <button type=\"submit\">\r\n                    Submit\r\n                </button>\r\n          </form>\r\n        );\r\n      }\r\n      \r\n      \r\n} \r\n\r\n\r\nexport default Form;","import React from 'react';\nimport {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Table from './Table';\nimport { render } from '@testing-library/react';\nimport {state} from 'react';\nimport Form from './Form';\n\nconst Header = () => {\n    return(\n        <header>\n          <h1>Dynamic React Page</h1>\n          <p>tutorial library React.js</p>\n        </header>\n    )\n}\n\nclass App extends Component {\n  state = {\n    characters: [{\n      name: 'Charlie',\n      job: 'Janitor',\n    }\n    ],\n  };\n\n  removeCharacter = (index) => {\n    const {characters} = this.state\n  \n    this.setState({\n      characters: characters.filter((character, i) => {\n        return i !== index\n      }),\n    })\n  };\n  \n  handleSubmit = character => {\n    this.setState({characters: [...this.state.characters, character]});\n}\n  \n\n  render() {   \n    const { characters } = this.state\n\n    return (\n      <div className=\"Container\">\n        <Header/>\n        <Table data={characters} removeCharacter = {this.removeCharacter}/>\n        <Form handleSubmit={this.handleSubmit}/>\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}